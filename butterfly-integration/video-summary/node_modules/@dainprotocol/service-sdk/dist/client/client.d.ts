import { CoreTool } from "ai";
import { DainClientAuth } from "./client-auth";
import { ServiceMetadata, ServiceConfig, ToolboxConfig, ToolConfig, ServiceContext, ServiceContextWithData, ToolWithJsonSchema, ServicePinnable, ServicePinnableWithWidget } from "./types";
export type { ServiceMetadata, ServiceConfig, ToolboxConfig, ToolConfig };
export declare class DainServiceConnection {
    private baseUrl;
    private clientAuth;
    constructor(baseUrl: string, clientAuth: DainClientAuth);
    makeRequest(method: string, path: string, body?: any): Promise<any>;
    getMetadata(): Promise<ServiceMetadata>;
    getServices(): Promise<ServiceConfig[]>;
    getToolboxes(): Promise<ToolboxConfig[]>;
    getToolbox(toolboxId: string): Promise<ToolboxConfig>;
    getTools(): Promise<ToolConfig[]>;
    getTool(toolId: string): Promise<ToolConfig>;
    getContexts(): Promise<ServiceContext[]>;
    getContext(contextId: string): Promise<ServiceContextWithData>;
    getAllContexts(): Promise<ServiceContextWithData[]>;
    getPinnables(): Promise<ServicePinnable[]>;
    getPinnable(pinnableId: string): Promise<ServicePinnableWithWidget>;
    getAllPinnables(): Promise<ServicePinnableWithWidget[]>;
    getAllToolsAsJsonSchema(): Promise<{
        tools: ToolWithJsonSchema[];
        reccomendedPrompts: string[];
    }>;
    loadToolbox(toolboxId: string, execute?: boolean): Promise<Record<string, CoreTool>>;
    createVercelAITool(toolInfo: ToolConfig): CoreTool;
    callTool(toolId: string, params: any): Promise<any>;
    callToolAndGetNewContext(toolId: string, params: any): Promise<{
        toolResult: any;
        context: ServiceContextWithData[];
    }>;
    createVercelAIToolWithoutExecute(toolInfo: ToolConfig): CoreTool;
    private convertSchemaToZod;
}
