import { z, ZodError } from "zod";
import { ExecutionContext, Hono } from "hono";
import { PaymentIntent } from "@/lib/payments";
export type AgentInfo = {
    agentId: string;
    address: string;
    smartAccountPDA?: string;
    id: string;
};
export type PricingInfo = {
    pricePerUse: number;
    currency: string;
};
export type Metadata = {
    title: string;
    description: string;
    logo?: string;
    version: string;
    author: string;
    tags: string[];
};
export type Identity = {
    publicKey?: string;
    privateKey?: string;
    agentId?: string;
    orgId?: string;
    apiKey?: string;
};
export type ToolConfig<TInput extends z.ZodType = z.ZodType, TOutput extends z.ZodType = z.ZodType> = {
    id: string;
    name: string;
    description: string;
    input: TInput;
    output: TOutput;
    pricing: PricingInfo;
    handler: (input: z.input<TInput>, agentInfo: AgentInfo, extraData?: any) => Promise<{
        text: string;
        data: z.output<TOutput>;
        ui: any | undefined;
        recommendedNextTool?: string;
        pleasePay?: PaymentIntent | undefined;
    }>;
    handleInputError?: (error: ZodError, agentInfo: AgentInfo, extraData?: any) => Promise<{
        text: string;
        data: z.output<TOutput>;
        ui: any | undefined;
        recommendedNextTool?: string;
        pleasePay?: PaymentIntent | undefined;
    }>;
};
export type ServiceConfig = {
    id: string;
    name: string;
    description: string;
    metadata: {
        capabilities: string[];
        languages: string[];
    };
    recommendedPrompt: string;
    recommendedTools: string[];
};
export type ServiceContext = {
    id: string;
    name: string;
    description: string;
    getContextData: (agentInfo: AgentInfo) => Promise<string>;
};
export type ServicePinnable = {
    id: string;
    type: "button" | "widget";
    label: string;
    name: string;
    description: string;
    icon: string;
    getWidget: (agentInfo: AgentInfo) => Promise<{
        text?: string;
        data?: any;
        ui?: any;
    }>;
};
export type ToolboxConfig = {
    id: string;
    name: string;
    description: string;
    tools: string[];
    metadata: {
        complexity: string;
        applicableFields: string[];
    };
    recommendedPrompt: string;
};
export interface DAINService {
    startNode: (options?: {
        port?: number;
    }) => Promise<ServiceManager>;
    startDeno: (options?: {
        port?: number;
    }) => Promise<ServiceManager>;
    startWorkers: () => (request: Request, Env?: unknown, executionCtx?: ExecutionContext) => Response | Promise<Response>;
    getMetadata: () => Metadata;
    getServices: () => ServiceConfig[];
    getContexts: () => ServiceContext[];
    getTools: () => ToolConfig[];
    getToolboxes: () => ToolboxConfig[];
    findTool: (toolId: string) => ToolConfig | undefined;
    findToolbox: (toolboxId: string) => ToolboxConfig | undefined;
    findService: (serviceId: string) => ServiceConfig | undefined;
    app: Hono;
    startService: () => Hono;
}
export type DAINServiceConfig = {
    metadata: Metadata;
    identity: Identity;
    services?: ServiceConfig[];
    tools: ToolConfig[];
    toolboxes?: ToolboxConfig[];
    routes?: (app: Hono) => void;
    contexts?: ServiceContext[];
    pinnables?: ServicePinnable[];
};
export interface ServiceManager {
    shutdown: () => Promise<void>;
    address: () => {
        port: number;
    };
}
export interface DAINPlugin {
    initialize: (service: DAINService) => Promise<void>;
}
export type ServerEnvironment = "node" | "deno" | "cloudflare" | "custom";
