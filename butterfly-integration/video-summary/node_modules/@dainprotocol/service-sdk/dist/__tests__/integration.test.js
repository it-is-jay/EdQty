"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
//File: src/___tests___/integration.test.ts
const nodeService_1 = require("../service/nodeService");
const core_1 = require("@/service/core");
const zod_1 = require("zod");
const ed25519_1 = require("@noble/curves/ed25519");
const bs58_1 = tslib_1.__importDefault(require("bs58"));
const client_auth_1 = require("@/client/client-auth");
const client_1 = require("@/client/client");
describe("DAIN Framework Integration", () => {
    const privateKey = ed25519_1.ed25519.utils.randomPrivateKey();
    const publicKey = ed25519_1.ed25519.getPublicKey(privateKey);
    const address = bs58_1.default.encode(publicKey);
    const clientPrivateKey = ed25519_1.ed25519.utils.randomPrivateKey();
    const agentAuth = new client_auth_1.DainClientAuth({
        privateKeyBase58: bs58_1.default.encode(clientPrivateKey),
        agentId: "agent-12",
        orgId: "org-12",
    });
    // Initialize the connection to the DAIN service
    const dainConnection = new client_1.DainServiceConnection(
    //agent URI
    "http://localhost:3003", agentAuth);
    const weatherTool = (0, nodeService_1.createTool)({
        id: "get-weather",
        name: "Get Weather",
        description: "Fetches weather for a city",
        input: zod_1.z.object({ city: zod_1.z.string() }),
        output: zod_1.z.object({ temperature: zod_1.z.number(), condition: zod_1.z.string() }),
        pricing: { pricePerUse: 0.01, currency: "USD" },
        handler: async ({ city }) => ({
            text: `The weather in ${city} is Sunny with a temperature of 22°C.`,
            data: { temperature: 22, condition: "Sunny" },
            ui: null,
        }),
    });
    const extraDataTool = (0, nodeService_1.createTool)({
        id: "extra-data-tool",
        name: "Extra Data Tool",
        description: "Tool to test extra data",
        input: zod_1.z.object({ cool: zod_1.z.string() }),
        output: zod_1.z.any(),
        pricing: { pricePerUse: 0.01, currency: "USD" },
        handler: async (cool, agentInfo, extraData) => {
            console.log("cool", cool);
            console.log("agentInfo", agentInfo);
            console.log("extraData", extraData);
            return {
                text: `Extra data: ${JSON.stringify(extraData)}`,
                data: { extraData },
                ui: null,
            };
        },
    });
    const weatherService = (0, nodeService_1.createService)({
        id: "weather-service",
        name: "Weather Service",
        description: "Provides weather information",
        metadata: {
            capabilities: ["current-weather"],
            languages: ["en"],
        },
        recommendedPrompt: "Ask about the weather",
        recommendedTools: ["get-weather", "extra-data-tool"],
    });
    const weatherToolbox = (0, nodeService_1.createToolbox)({
        id: "weather-toolbox",
        name: "Weather Toolbox",
        description: "Collection of weather tools",
        tools: ["get-weather", "extra-data-tool"],
        metadata: {
            complexity: "Low",
            applicableFields: ["Meteorology", "Travel"],
        },
        recommendedPrompt: "Use these tools for weather-related tasks",
    });
    const weatherContext = (0, core_1.createContext)({
        id: "weather-context",
        name: "Weather Context",
        description: "Context for weather data",
        getContextData: async () => {
            return "Weather data";
        },
    });
    const weatherPinnable = (0, core_1.createPinnable)({
        id: "weather-pinnable",
        type: "widget",
        label: "Weather Widget",
        name: "Weather Info",
        description: "Displays current weather information",
        icon: "☀️",
        getWidget: async () => ({
            text: "Current weather: Sunny, 22°C",
            data: { temperature: 22, condition: "Sunny" },
            ui: { type: "text" },
        }),
    });
    const dainService = (0, nodeService_1.defineDAINService)({
        metadata: {
            title: "Weather DAIN Service",
            description: "A DAIN service for weather information",
            version: "1.0.0",
            author: "Test Author",
            tags: ["weather", "dain"],
        },
        identity: {
            publicKey: bs58_1.default.encode(publicKey),
            agentId: "weather-agent",
            orgId: "weather-org",
            privateKey: bs58_1.default.encode(privateKey),
        },
        services: [weatherService],
        tools: [weatherTool, extraDataTool],
        toolboxes: [weatherToolbox],
        contexts: [weatherContext],
        pinnables: [weatherPinnable],
    });
    let server;
    beforeAll(async () => {
        server = await dainService.startNode({ port: 3003 });
    });
    afterAll(async () => {
        await server.shutdown();
    });
    // ... (previous tests remain unchanged)
    describe("Pinnables", () => {
        it("Can list pinnables", async () => {
            const response = await dainConnection.getPinnables();
            expect(response).toHaveLength(1);
            expect(response[0]).toEqual({
                id: "weather-pinnable",
                type: "widget",
                label: "Weather Widget",
                name: "Weather Info",
                description: "Displays current weather information",
                icon: "☀️",
            });
        });
        it("Can get a specific pinnable", async () => {
            const response = await dainConnection.getPinnable("weather-pinnable");
            expect(response).toEqual({
                id: "weather-pinnable",
                type: "widget",
                label: "Weather Widget",
                name: "Weather Info",
                description: "Displays current weather information",
                icon: "☀️",
                widget: {
                    text: "Current weather: Sunny, 22°C",
                    data: { temperature: 22, condition: "Sunny" },
                    ui: { type: "text" },
                },
            });
        });
        // extra data tool
        it("Can call extra data tool", async () => {
            const response = await dainConnection.callTool("extra-data-tool", {
                cool: "cool",
                DAIN_EXTRA_DATA: {
                    testExtraData: "testExtraData",
                },
            });
            expect(response).toEqual({
                text: "Extra data: {\"testExtraData\":\"testExtraData\"}",
                data: { extraData: { testExtraData: "testExtraData" } },
                ui: null,
            });
        });
        it("Can get all pinnables with their widgets", async () => {
            const response = await dainConnection.getAllPinnables();
            expect(response).toHaveLength(1);
            expect(response[0]).toEqual({
                id: "weather-pinnable",
                type: "widget",
                label: "Weather Widget",
                name: "Weather Info",
                description: "Displays current weather information",
                icon: "☀️",
                widget: {
                    text: "Current weather: Sunny, 22°C",
                    data: { temperature: 22, condition: "Sunny" },
                    ui: { type: "text" },
                },
            });
        });
        it("Rejects request for non-existent pinnable", async () => {
            await expect(dainConnection.getPinnable("non-existent-pinnable")).rejects.toThrow();
        });
    });
});
//# sourceMappingURL=integration.test.js.map