"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = deploy;
var build_1 = __importDefault(require("./build"));
var utils_1 = require("../utils");
var ora_1 = __importDefault(require("ora"));
var fs_extra_1 = __importDefault(require("fs-extra"));
var path_1 = __importDefault(require("path"));
function deploy(options) {
    return __awaiter(this, void 0, void 0, function () {
        var config, spinner, outDir_1, platformBaseUrl, deployUrl, files, deployFiles, deployData, response, result, error_1;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    config = (0, utils_1.getDainConfig)(options.config);
                    // disable for now only availible for internal testing for now
                    if (config.runtime !== 'workers') {
                        (0, utils_1.logError)("Deployment is only supported for 'workers' runtime.");
                        process.exit(1);
                    }
                    spinner = (0, ora_1.default)("Deploying project...").start();
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 7, , 8]);
                    // First, build the project
                    return [4 /*yield*/, (0, build_1.default)({ config: options.config })];
                case 2:
                    // First, build the project
                    _a.sent();
                    outDir_1 = config['out-dir'] || 'build';
                    platformBaseUrl = config['platform-base-url'] || 'https://platform.dain.org';
                    deployUrl = "".concat(platformBaseUrl, "/api/platform-api/v1/service/deploy");
                    return [4 /*yield*/, fs_extra_1.default.readdir(outDir_1)];
                case 3:
                    files = _a.sent();
                    return [4 /*yield*/, Promise.all(files.map(function (file) { return __awaiter(_this, void 0, void 0, function () {
                            var fileType, content;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        fileType = path_1.default.extname(file).slice(1);
                                        if (!['js', 'mjs', 'wasm'].includes(fileType)) return [3 /*break*/, 2];
                                        return [4 /*yield*/, fs_extra_1.default.readFile(path_1.default.join(outDir_1, file), 'utf-8')];
                                    case 1:
                                        content = _a.sent();
                                        return [2 /*return*/, {
                                                name: file,
                                                content: content,
                                                type: fileType,
                                            }];
                                    case 2: return [2 /*return*/, null];
                                }
                            });
                        }); })).then(function (files) { return files.filter(Boolean); })];
                case 4:
                    deployFiles = _a.sent();
                    deployData = {
                        serviceIdentifer: config['project-id'],
                        files: deployFiles,
                    };
                    return [4 /*yield*/, fetch(deployUrl, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                "X-DAIN-SIGNATORY-ADDRESS": "TODO: X-DAIN-SIGNATORY-ADDRESS",
                                "X-DAIN-SIGNATURE": "TODO: X-DAIN-SIGNATORY-SIGNATURE",
                            },
                            body: JSON.stringify(deployData),
                        })];
                case 5:
                    response = _a.sent();
                    if (!response.ok) {
                        throw new Error("Deployment failed: ".concat(response.statusText));
                    }
                    return [4 /*yield*/, response.json()];
                case 6:
                    result = _a.sent();
                    (0, utils_1.logSuccess)("Deployment completed successfully.");
                    spinner.succeed("Deployment completed successfully.");
                    (0, utils_1.logInfo)("Deployment result: ".concat(JSON.stringify(result, null, 2)));
                    return [3 /*break*/, 8];
                case 7:
                    error_1 = _a.sent();
                    spinner.fail("Deployment failed.");
                    (0, utils_1.logError)("Error during deployment", error_1);
                    process.exit(1);
                    return [3 /*break*/, 8];
                case 8: return [2 /*return*/];
            }
        });
    });
}
